spring:
  #处理 FeignClient 重名问题
  main:
    allow-bean-definition-overriding: on
  cloud:
    sentinel:
      transport:
        dashboard: ${SENTINEL_DASHBOARD:localhost:8858}
      eager: true
  rabbitmq:
    host: ${RABBIT_MQ_HOST:localhost}
    port: ${RABBIT_MQ_PORT:5672}
    username: ${RABBIT_MQ_USERNAME:guest}
    password: ${RABBIT_MQ_PASSWORD:guest}
  sleuth:
    sampler:
      probability: 1.0
  zipkin:
    base-url: ${ZIPKIN_URL:http://localhost:9411}
    sender:
      type: rabbit
  datasource:
    druid:
      #JDBC配置
      url: ${JDBC_URL:jdbc:mysql://localhost:3306/lion?useUnicode=true&characterEncoding=utf8&useSSL=false&allowPublicKeyRetrieval=true}
      username: ${JDBC_USERNAME:lion}
      password: ${JDBC_PASSWORD:lion}
      driver-class-name: ${JDBC_DRIVER:com.mysql.cj.jdbc.Driver}
      #配置连接池大小
      initial-size: 0
      max-active: 8
      validation-query: SELECT 1
      test-on-borrow: off
      test-on-return: off
      test-while-idle: on
      filters:
        - stat
        - wall
        - log4j
      #监控配置
      web-stat-filter:
        enabled: on
        url-pattern: /*
        exclusions: '*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*'
        #监控单个url调用的sql列表
        profile-enable: true
      #spring监控配置，多个使用,隔开
      aop-patterns: com.lion.demo.consumer.*
      filter:
        #慢SQL记录
        stat:
          merge-sql: on
          log-slow-sql: on
          slow-sql-millis: 10000
        #sql防火墙监控开启
        wall:
          enabled: on
          db-type: mysql
          config:
            alter-table-allow: off
            truncate-allow: off
            drop-table-allow: off
            #是否允许非以上基本语句的其他语句，缺省关闭，通过这个选项就能够屏蔽DDL
            none-base-statement-allow: off
            #检查UPDATE语句是否无where条件，这是有风险的，但不是SQL注入类型的风险
            update-where-none-check: on
            #是否允许SELECT ... INTO OUTFILE语句，这个是mysql注入攻击的常见手段，缺省是禁止的
            select-into-outfile-allow: off
            #是否允许调用Connection.getMetadata方法，这个方法调用会暴露数据库的表信息
            metadata-allow: on
          #对被认为是攻击的SQL进行LOG.error输出
          log-violation: on
          #对被认为是攻击的SQL抛出SQLExcepton
          throw-exception: on
      #管理界面用户
      stat-view-servlet:
        enabled: on
        url-pattern: /druid/*
        reset-enable: false
        login-username: ${DRUID_USERNAME:druid}
        login-password: ${DRUID_PASSWORD:druid}
        #白名单
        #allow: 127.0.0.1
        #黑名单
        #deny: 192.168.0.1
  redis:
    host: ${REDIS_HOST:localhost}
    port: ${REDIS_PORT:6379}
    password: ${REDIS_PASSWORD:lion}
  cache:
    type: redis

mybatis-plus:
  #type-aliases-package: com.lion.demo.consumer..*.entity
  mapper-locations: classpath:mapper/**/*.xml
  configuration:
    #将执行的sql打印出来，生产需关闭
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl

#分页插件配置
pagehelper:
  helperDialect: mysql
  reasonable: true
  supportMethodsArguments: true
  params: count=countSql

#开启sentinel断路器
feign:
  sentinel:
    enabled: true

#配置无需认证的url
pattern:
  permit:
    urls: /init/**,/feign/**,/ribbon/**,/sentinel/**,/lock/**,/product/**,/rabbit/**,/upload/**,/download/**,/temp/**

#配置附件上传路径
file:
  upload:
    path: /tmp/upload

#自定义值
foo: This is foo...

management:
  endpoints:
    web:
      exposure:
        include: '*'
  endpoint:
    health:
      show-details: always